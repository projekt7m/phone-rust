/*
 * Phone and Queue Backend
 *
 * API for managing phone services  This is the API of the service at P7M that manages phone services.  **Attention:** this API will probably still change a lot in the future, it's not at all stable yet
 *
 * The version of the OpenAPI document: 0.7.0
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Block {
    #[serde(rename = "block_id")]
    pub block_id: uuid::Uuid,
    #[serde(rename = "tenant_id")]
    pub tenant_id: uuid::Uuid,
    #[serde(rename = "queue_id")]
    pub queue_id: uuid::Uuid,
    #[serde(rename = "start_time")]
    pub start_time: String,
    #[serde(rename = "end_time")]
    pub end_time: String,
    #[serde(rename = "announce")]
    pub announce: String,
    #[serde(rename = "started", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub started: Option<Option<String>>,
    #[serde(rename = "ended", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ended: Option<Option<String>>,
    #[serde(rename = "started2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub started2: Option<Option<String>>,
    #[serde(rename = "ended2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ended2: Option<Option<String>>,
}

impl Block {
    pub fn new(block_id: uuid::Uuid, tenant_id: uuid::Uuid, queue_id: uuid::Uuid, start_time: String, end_time: String, announce: String) -> Block {
        Block {
            block_id,
            tenant_id,
            queue_id,
            start_time,
            end_time,
            announce,
            started: None,
            ended: None,
            started2: None,
            ended2: None,
        }
    }
}


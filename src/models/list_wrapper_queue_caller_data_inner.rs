/*
 * Phone and Queue Backend
 *
 * API for managing phone services  This is the API of the service at P7M that manages phone services.  **Attention:** this API will probably still change a lot in the future, it's not at all stable yet
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListWrapperQueueCallerDataInner {
    #[serde(rename = "queueCallerId")]
    pub queue_caller_id: uuid::Uuid,
    #[serde(rename = "tenantId")]
    pub tenant_id: uuid::Uuid,
    #[serde(rename = "queueId")]
    pub queue_id: uuid::Uuid,
    #[serde(rename = "queueNumberId")]
    pub queue_number_id: uuid::Uuid,
    #[serde(rename = "callerNumber")]
    pub caller_number: String,
    #[serde(rename = "prio")]
    pub prio: i32,
    #[serde(rename = "ringRequest")]
    pub ring_request: bool,
    #[serde(rename = "ringUntil", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ring_until: Option<Option<String>>,
    #[serde(rename = "startTime")]
    pub start_time: String,
    #[serde(rename = "lastChange")]
    pub last_change: String,
    #[serde(rename = "nextCheck")]
    pub next_check: String,
}

impl ListWrapperQueueCallerDataInner {
    pub fn new(queue_caller_id: uuid::Uuid, tenant_id: uuid::Uuid, queue_id: uuid::Uuid, queue_number_id: uuid::Uuid, caller_number: String, prio: i32, ring_request: bool, start_time: String, last_change: String, next_check: String) -> ListWrapperQueueCallerDataInner {
        ListWrapperQueueCallerDataInner {
            queue_caller_id,
            tenant_id,
            queue_id,
            queue_number_id,
            caller_number,
            prio,
            ring_request,
            ring_until: None,
            start_time,
            last_change,
            next_check,
        }
    }
}

